// Tendremos el control de como hacer nuestras peticiones http que van hacia el login.
// Centralizamos la lógica.
import { AxiosError } from 'axios';
import { tesloApi } from '../api/teslo.api';

// Generated by https://quicktype.io
//
// Creado de la siguiente forma:
// En Postman ejecutamos este endpoint: localhost:3000/api/auth/login
// Copiamos el resultado
// En VSCode Cmd+Shift+P y seleccionamos Paste JSON as Code
// Como nombre de raiz indicamos LoginResponse
export interface LoginResponse {
  id: string;
  email: string;
  fullName: string;
  isActive: boolean;
  roles: string[];
  token: string;
}

export class AuthService {
  static login = async (email: string, password: string): Promise<LoginResponse> => {
    try {
      const { data } = await tesloApi.post<LoginResponse>('/auth/login', { email, password });
      console.log(data);

      return data;
    } catch (error) {
      if (error instanceof AxiosError) {
        console.log(error.response?.data);
        throw new Error(error.response?.data);
      }

      console.log(error);
      throw new Error('Unable to login');
    }
  };

  static checkStatus = async (): Promise<LoginResponse> => {
    try {
      // Aquí deberíamos indicar el token, dentro del header, pero eso lo vamos
      // a hacer con interceptores, para poder usar esto fuera del contexto de React.
      const { data } = await tesloApi.get<LoginResponse>('/auth/check-status');
      return data;
    } catch (error) {
      console.log(error);
      throw new Error('Unauthorized');
    }
  };
}
